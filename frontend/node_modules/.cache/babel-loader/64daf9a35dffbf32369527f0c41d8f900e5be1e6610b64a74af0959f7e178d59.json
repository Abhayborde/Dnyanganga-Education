{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\ACER\\\\Downloads\\\\newlogin\\\\newlogin\\\\frontend\\\\src\\\\routes\\\\ProtectedRoute.jsx\";\nimport React from \"react\";\nimport { Navigate } from \"react-router-dom\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst ProtectedRoute = ({\n  element,\n  roles\n}) => {\n  const token = localStorage.getItem(\"token\"); // Check if user is authenticated\n  const role = localStorage.getItem(\"role\"); // Retrieve user's role\n\n  if (!token || !role) {\n    // Redirect to login if not authenticated\n    return /*#__PURE__*/_jsxDEV(Navigate, {\n      to: \"/login\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 10,\n      columnNumber: 12\n    }, this);\n  }\n  if (roles.includes(role)) {\n    // Render the component if the role is allowed\n    return element;\n  }\n\n  // Redirect to unauthorized page if the role is not allowed\n  return /*#__PURE__*/_jsxDEV(Navigate, {\n    to: \"/unauthorized\"\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 19,\n    columnNumber: 10\n  }, this);\n};\n_c = ProtectedRoute;\nexport default ProtectedRoute;\nvar _c;\n$RefreshReg$(_c, \"ProtectedRoute\");","map":{"version":3,"names":["React","Navigate","jsxDEV","_jsxDEV","ProtectedRoute","element","roles","token","localStorage","getItem","role","to","fileName","_jsxFileName","lineNumber","columnNumber","includes","_c","$RefreshReg$"],"sources":["C:/Users/ACER/Downloads/newlogin/newlogin/frontend/src/routes/ProtectedRoute.jsx"],"sourcesContent":["import React from \"react\";\r\nimport { Navigate } from \"react-router-dom\";\r\n\r\nconst ProtectedRoute = ({ element, roles }) => {\r\n  const token = localStorage.getItem(\"token\"); // Check if user is authenticated\r\n  const role = localStorage.getItem(\"role\"); // Retrieve user's role\r\n\r\n  if (!token || !role) {\r\n    // Redirect to login if not authenticated\r\n    return <Navigate to=\"/login\" />;\r\n  }\r\n\r\n  if (roles.includes(role)) {\r\n    // Render the component if the role is allowed\r\n    return element;\r\n  }\r\n\r\n  // Redirect to unauthorized page if the role is not allowed\r\n  return <Navigate to=\"/unauthorized\" />;\r\n};\r\n\r\nexport default ProtectedRoute;\r\n"],"mappings":";AAAA,OAAOA,KAAK,MAAM,OAAO;AACzB,SAASC,QAAQ,QAAQ,kBAAkB;AAAC,SAAAC,MAAA,IAAAC,OAAA;AAE5C,MAAMC,cAAc,GAAGA,CAAC;EAAEC,OAAO;EAAEC;AAAM,CAAC,KAAK;EAC7C,MAAMC,KAAK,GAAGC,YAAY,CAACC,OAAO,CAAC,OAAO,CAAC,CAAC,CAAC;EAC7C,MAAMC,IAAI,GAAGF,YAAY,CAACC,OAAO,CAAC,MAAM,CAAC,CAAC,CAAC;;EAE3C,IAAI,CAACF,KAAK,IAAI,CAACG,IAAI,EAAE;IACnB;IACA,oBAAOP,OAAA,CAACF,QAAQ;MAACU,EAAE,EAAC;IAAQ;MAAAC,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAAE,CAAC;EACjC;EAEA,IAAIT,KAAK,CAACU,QAAQ,CAACN,IAAI,CAAC,EAAE;IACxB;IACA,OAAOL,OAAO;EAChB;;EAEA;EACA,oBAAOF,OAAA,CAACF,QAAQ;IAACU,EAAE,EAAC;EAAe;IAAAC,QAAA,EAAAC,YAAA;IAAAC,UAAA;IAAAC,YAAA;EAAA,OAAE,CAAC;AACxC,CAAC;AAACE,EAAA,GAhBIb,cAAc;AAkBpB,eAAeA,cAAc;AAAC,IAAAa,EAAA;AAAAC,YAAA,CAAAD,EAAA","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}