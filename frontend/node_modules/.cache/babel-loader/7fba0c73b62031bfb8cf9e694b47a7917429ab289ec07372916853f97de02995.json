{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\ACER\\\\abc\\\\newlogin\\\\frontend\\\\src\\\\routes\\\\ProtectedRoute.jsx\";\nimport React from 'react';\nimport { Navigate } from 'react-router-dom';\n\n// ProtectedRoute component for handling role-based access\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst ProtectedRoute = ({\n  allowedRoles,\n  children\n}) => {\n  const userRole = localStorage.getItem('userRole'); // Get role from local storage or context\n  const isAuthenticated = localStorage.getItem('isAuthenticated'); // Check if user is logged in\n\n  if (!isAuthenticated) {\n    // Redirect to login if the user is not authenticated\n    return /*#__PURE__*/_jsxDEV(Navigate, {\n      to: \"/login\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 11,\n      columnNumber: 12\n    }, this);\n  }\n  if (!allowedRoles.includes(userRole)) {\n    // Redirect to login if the user's role is not allowed for the requested route\n    return /*#__PURE__*/_jsxDEV(Navigate, {\n      to: \"/login\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 16,\n      columnNumber: 12\n    }, this);\n  }\n  return children;\n};\n_c = ProtectedRoute;\nexport default ProtectedRoute;\nvar _c;\n$RefreshReg$(_c, \"ProtectedRoute\");","map":{"version":3,"names":["React","Navigate","jsxDEV","_jsxDEV","ProtectedRoute","allowedRoles","children","userRole","localStorage","getItem","isAuthenticated","to","fileName","_jsxFileName","lineNumber","columnNumber","includes","_c","$RefreshReg$"],"sources":["C:/Users/ACER/abc/newlogin/frontend/src/routes/ProtectedRoute.jsx"],"sourcesContent":["import React from 'react';\r\nimport { Navigate } from 'react-router-dom';\r\n\r\n// ProtectedRoute component for handling role-based access\r\nconst ProtectedRoute = ({ allowedRoles, children }) => {\r\n  const userRole = localStorage.getItem('userRole'); // Get role from local storage or context\r\n  const isAuthenticated = localStorage.getItem('isAuthenticated'); // Check if user is logged in\r\n\r\n  if (!isAuthenticated) {\r\n    // Redirect to login if the user is not authenticated\r\n    return <Navigate to=\"/login\" />;\r\n  }\r\n\r\n  if (!allowedRoles.includes(userRole)) {\r\n    // Redirect to login if the user's role is not allowed for the requested route\r\n    return <Navigate to=\"/login\" />;\r\n  }\r\n\r\n  return children;\r\n};\r\n\r\nexport default ProtectedRoute;\r\n"],"mappings":";AAAA,OAAOA,KAAK,MAAM,OAAO;AACzB,SAASC,QAAQ,QAAQ,kBAAkB;;AAE3C;AAAA,SAAAC,MAAA,IAAAC,OAAA;AACA,MAAMC,cAAc,GAAGA,CAAC;EAAEC,YAAY;EAAEC;AAAS,CAAC,KAAK;EACrD,MAAMC,QAAQ,GAAGC,YAAY,CAACC,OAAO,CAAC,UAAU,CAAC,CAAC,CAAC;EACnD,MAAMC,eAAe,GAAGF,YAAY,CAACC,OAAO,CAAC,iBAAiB,CAAC,CAAC,CAAC;;EAEjE,IAAI,CAACC,eAAe,EAAE;IACpB;IACA,oBAAOP,OAAA,CAACF,QAAQ;MAACU,EAAE,EAAC;IAAQ;MAAAC,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAAE,CAAC;EACjC;EAEA,IAAI,CAACV,YAAY,CAACW,QAAQ,CAACT,QAAQ,CAAC,EAAE;IACpC;IACA,oBAAOJ,OAAA,CAACF,QAAQ;MAACU,EAAE,EAAC;IAAQ;MAAAC,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAAE,CAAC;EACjC;EAEA,OAAOT,QAAQ;AACjB,CAAC;AAACW,EAAA,GAfIb,cAAc;AAiBpB,eAAeA,cAAc;AAAC,IAAAa,EAAA;AAAAC,YAAA,CAAAD,EAAA","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}